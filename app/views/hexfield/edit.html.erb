<% content_for :head do %>
  <%# javascript_import_module_tag "parse5" %>

<%# not this one:
  <script src="/hex/mcp.js" type="module"></script>
  %>
  <script src="/builder/builder-elements.js" type="module"></script>
  <script src="/hex/files.js" type="module"></script>
  <script src="/hex/tabs.js" type="module"></script>
<% end %>

<style>

#header
{
  display: flex;
}

#header > *
{
  flex: 1;
  margin: 0 1rem;
}

#user-div,
#user-div > div
{
  text-align: right;
}

#middle
{
  height: 100%;
  min-height: 0;
  display: flex;
  gap: 1rem;
}

#sidebar
{
  width: 20%;
  flex-shrink: 0;
}

#workspace
{
  flex: 1;
  overflow: hidden;
}
</style>

<div id="main">

<div id="header">

<h1>Hexfield</h1>

<div id="vis-div" style="text-align: center; display: none">
  Visibility:
  <select id="vis-sel">
    <option value="0">Private</option>
    <option value="1">Public</option>
  </select>
</div>

<div id="user-div">
  <%# if @user.present? %>
  <% if @user_signed_in %>
    <div>User: <%= @user.name %></div>
    <div>
      <%= link_to "Sign out", "/users/sign_out", data: { turbo_method: :delete } %> 
    </div>
  <% end %>
</div>

</div>

<div id="middle">

<div id="sidebar">
  <hex-tabs no-tabs id="sidebar-tabs">
    <hex-tabs>
      <div tab="One">One</div>
      <div tab="Two">Two</div>
    </hex-tabs>
    <builder-bank></builder-bank>
  </hex-tabs>
</div>

<hex-tabs id="workspace">
  <div tab="Code">
    <div id="body"></div>
    <script>
      const tabs = document.querySelector("#sidebar-tabs");
      let scriptPar = document.currentScript.parentElement;
      scriptPar.onshow =
        () =>
        {
          console.log("show this!");
          tabs.selectedIndex = 0;
        };

      // TODO: move to scriptPar and have tabs iterate and run
      let parPar = scriptPar.parentElement.init =
        mcp =>
        {
          // anything?
        };
    </script>
  </div>
  <div tab="Builder">
    TBD
    <script>
      scriptPar = document.currentScript.parentElement;
      scriptPar.onshow =
        () =>
        {
          console.log("show this!");
          tabs.selectedIndex = 1;
        };

      // TODO: move to scriptPar and have tabs iterate and run
      parPar = scriptPar.parentElement.init =
        mcp =>
        {
          // anything?
        };
    </script>
  </div>
  <div tab="Render">
    <style>
#render
{
  width: 100%;
  height: 100%;
  border-width: 0;
  display: block;
}
    </style>
    <iframe id="render"></iframe>
    <script>
      const render = document.querySelector("#render");
      scriptPar = document.currentScript.parentElement;
      scriptPar.onshow =
        () =>
        {
          render.contentWindow.location.reload();
          tabs.selectedIndex = 0;
        };

      // TODO: move to scriptPar and have tabs iterate and run
      parPar = scriptPar.parentElement.init =
        mcp =>
        {
          mcp.regHexEvent(mcp.events.load_code_file_text,
            file =>
            {
              render.contentWindow.location = `/web/${file}`;
            }
          );
        };
    </script>
  </div>
</hex-tabs>

</div>


<div id="footer">
  <hex-files></hex-files>
</div>

</div>

<script type="module">
import * as mcp from "/hex/mcp.js";
import {html} from "@codemirror/lang-html"
import {EditorView, basicSetup} from "codemirror"

const fixedHeightEditor = EditorView.theme({
  "&": {height: "100%"},
  ".cm-scroller": {overflow: "auto"}
});

//body = document.querySelector("hex-tabs").shadowRoot.querySelector("#root");
let root = document.querySelector("#workspace").shadowRoot;
let body = document.querySelector("#workspace").shadowRoot.querySelector("#body");

let deb_upd;
const view = new EditorView({
  //doc: "Start document",
  parent: body,
  root: root,
  extensions: [
    basicSetup,
    fixedHeightEditor,
    html(),
    EditorView.updateListener.of(
      v =>
      {
        if (v.docChanged)
        {
          if (deb_upd) clearTimeout(deb_upd);
          deb_upd = setTimeout(
            () =>
            {
                const code = view.state.doc.toString();
                mcp.file_data[mcp.current_file_name] = code;
                mcp.fireEvent(mcp.events.update_file_data);
            },
            500 // delay
          );
        }
      })
  ]
});

window.cm = view; // TODO: remove after debugging

mcp.register_html_editor(view);

const vis_sel = document.querySelector("#vis-sel");
const params = new URLSearchParams(document.location.search);
vis_sel.selectedIndex = params.get("project[visibility]");
vis_sel.addEventListener(
  "change",
  () =>
  {
    const sp = new URLSearchParams(document.location.search);
    sp.set("project[visibility]", vis_sel.selectedIndex);
    window.history.replaceState(null, "", `edit?${sp}`);
    mcp.update_project();
  }
);
const vis_div = document.querySelector("#vis-div");
vis_div.style.display = "initial";
</script>